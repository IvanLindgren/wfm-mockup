import React, { useState, useEffect } from 'react';
import { Modal, Box, Typography, List, ListItem, ListItemText, Checkbox, Button, Divider, Chip } from '@mui/material';
import ListItemButton from '@mui/material/ListItemButton';
import Alert from '@mui/material/Alert';
import BuildIcon from '@mui/icons-material/Build';
import MemoryIcon from '@mui/icons-material/Memory';
import RouterIcon from '@mui/icons-material/Router';
import EmojiObjectsIcon from '@mui/icons-material/EmojiObjects';
import './EquipmentSelectModal.anim.css';

// –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–≤—ã–Ω–µ—Å–µ–Ω—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
const modalStyle = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '90%',
  maxWidth: 500,
  bgcolor: '#fff0fa',
  border: 'none',
  borderRadius: '16px',
  boxShadow: '0 8px 32pxrgba(255, 126, 197, 0.33)',
  p: 4,
  outline: 'none',
};

function EquipmentSelectModal({ open, onClose, equipmentList = [], requiredTypes = [], onSelect }) {
  const [selectedIds, setSelectedIds] = useState([]);
  const [selectionError, setSelectionError] = useState('');

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (open) {
      setSelectedIds([]);
      setSelectionError('');
    }
  }, [open]);

  const handleToggle = (id) => {
    setSelectionError(''); // –°–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
    const currentIndex = selectedIds.indexOf(id);
    const newChecked = [...selectedIds];

    if (currentIndex === -1) {
      newChecked.push(id);
    } else {
      newChecked.splice(currentIndex, 1);
    }
    setSelectedIds(newChecked);
  };

  const validateSelection = () => {
    const selectedItems = equipmentList.filter(eq => selectedIds.includes(eq.id));
    const selectedTypes = selectedItems.map(item => item.type);

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–±—Ä–∞–Ω–æ –ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —Ç–∏–ø–∞
    for (const reqType of requiredTypes) {
      if (!selectedTypes.includes(reqType)) {
        return `–ù–µ –≤—ã–±—Ä–∞–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞: ${reqType}`;
      }
    }
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    return ''; // –û—à–∏–±–∫–∏ –Ω–µ—Ç
  }

  const handleSubmit = () => {
    const errorMsg = validateSelection();
    if (errorMsg) {
        setSelectionError(errorMsg);
        return;
    }

    const finalSelection = equipmentList.filter(eq => selectedIds.includes(eq.id));
    onSelect(finalSelection);
  };

  return (
    <Modal
      open={open}
      onClose={onClose}
      closeAfterTransition
      aria-labelledby="equipment-select-modal-title"
      aria-describedby="equipment-select-modal-description"
    >
      <Box sx={modalStyle} className="equipment-modal-appear">
        <Typography variant="h6" component="h2" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
          <EmojiObjectsIcon color="primary" sx={{ fontSize: 28 }} />
          –í—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è <span role="img" aria-label="tools">üõ†Ô∏è</span>
        </Typography>
        <Divider sx={{ mb: 2 }} />
        <List>
          {equipmentList.length > 0 ? equipmentList.map((eq) => (
            <ListItem key={eq.id} disablePadding className="equipment-list-item">
              <ListItemButton onClick={() => handleToggle(eq.id)} selected={selectedIds.includes(eq.id)}>
                <Checkbox
                  edge="start"
                  checked={selectedIds.includes(eq.id)}
                  tabIndex={-1}
                  disableRipple
                  color="primary"
                  sx={{ mr: 1 }}
                />
                {/* –ò–∫–æ–Ω–∫–∞ –ø–æ —Ç–∏–ø—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è + —ç–º–æ–¥–∑–∏ */}
                {eq.type === '–†–æ—É—Ç–µ—Ä' && <RouterIcon sx={{ color: '#1976d2', mr: 1 }} />}
                {eq.type === '–ü–∞–º—è—Ç—å' && <MemoryIcon sx={{ color: '#388e3c', mr: 1 }} />}
                {eq.type === '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' && <BuildIcon sx={{ color: '#fbc02d', mr: 1 }} />}
                {/* –≠–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ */}
                {eq.type !== '–†–æ—É—Ç–µ—Ä' && eq.type !== '–ü–∞–º—è—Ç—å' && eq.type !== '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' && (
                  <span className="equipment-emoji" role="img" aria-label="equipment">üîß</span>
                )}
                <ListItemText
                  primary={eq.name}
                  secondary={<span style={{ color: '#888' }}>{eq.type}</span>}
                  sx={{ ml: 1 }}
                />
              </ListItemButton>
            </ListItem>
          )) : (
            <Typography sx={{p: 2, textAlign: 'center', color: 'text.secondary'}}>
              –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ <span role="img" aria-label="sad">üòï</span>.
            </Typography>
          )}
        </List>
        {selectionError && (
          <Alert severity="warning" className="equipment-alert" sx={{ mt: 2, fontSize: '1.1em', alignItems: 'center' }}>
            ‚ö†Ô∏è {selectionError}
          </Alert>
        )}
        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end', background: 'none' }}>
          <Button onClick={onClose} className="cancel-btn-anim" sx={{ mr: 1, borderRadius: 2, px: 3 }}>
            ‚ùå –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            variant="contained"
            onClick={handleSubmit}
            disabled={selectedIds.length === 0 || equipmentList.length === 0}
            className="confirm-btn-anim"
            sx={{ borderRadius: 2, px: 3, boxShadow: '0 2px 8px #ff69b433' }}
            >
            ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
          </Button>
        </Box>
      </Box>
    </Modal>
  );
}
export default EquipmentSelectModal;